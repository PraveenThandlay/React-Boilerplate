/**
 * DEVELOPMENT WEBPACK CONFIGURATION
 */

const path = require('path');
const webpack = require('webpack');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const featurePath = require('./webpack.paths');

const plugins = [
  new webpack.HotModuleReplacementPlugin(),
  new webpack.NoEmitOnErrorsPlugin(),
  new HtmlWebpackPlugin({
    inject: true, // Inject all files that are generated by webpack, e.g. bundle.js
    template: path.resolve(process.cwd(), 'app/index.html'),
  }),
];

module.exports = require('./webpack.base.babel')({
  // Add hot reloading in development
  mode: 'development',
  entry: [
    'eventsource-polyfill', // Necessary for hot reloading with IE
    'webpack-hot-middleware/client?reload=true',
  ].concat(converObjToArr(featurePath)),

  // Don't use hashes in dev mode for better performance
  output: {
    filename: '[name].js',
    chunkFilename: '[name].chunk.js',
  },

  // Add development plugins
  plugins,

  // Tell babel that we want to hot-reload
  babelQuery: {
    presets: ['react-hmre'],
  },
  optimization: {
    runtimeChunk: {
      name: 'vendor',
    },
  },
  // Emit a source map for easier debugging
  // devtool: 'cheap-module-eval-source-map',
  devtool: 'source-map',
});

/**
 * Select which plugins to use to optimize the bundle's handling of
 * third party dependencies.
 */

function converObjToArr(entryPoints) {
  const arr = [];
  for (const key in entryPoints) {
    if (entryPoints.hasOwnProperty(key)) arr.push(entryPoints[key]);
  }
  return arr;
}
